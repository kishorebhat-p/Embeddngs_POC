# -*- coding: utf-8 -*-
"""UBS_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QLjxzYchD6cIzbNb2zid_oXXodTBTloY
"""

!pip install openai num2words matplotlib plotly scipy scikit-learn pandas tiktoken

import openai
import os
import re
import requests
import sys
from num2words import num2words
import os
import pandas as pd
import numpy as np
from openai.embeddings_utils import get_embedding, cosine_similarity
import tiktoken


openai.api_type = "azure"
openai.api_base = "https://openai-pocfsstar.openai.azure.com/"
openai.api_version = "2022-12-01"
os.environ["OPENAI_API_KEY"] = "b8ce78e2c7954089b27c6045c799bb0d"
openai.api_key = os.getenv("OPENAI_API_KEY")




df=pd.read_excel('/content/AppInventory_Sample_0822.xlsx')

df.head()

import re
def normalize_text(s, sep_token = " \n "):
    s = re.sub(r'\s+',  ' ', s).strip()
    s = re.sub(r". ,","",s)
    # remove all instances of multiple spaces
    s = s.replace("..",".")
    s = s.replace(". .",".")
    s = s.replace("\n", "")
    s = s.replace("-", "")
    s = s.strip()

    return s

df['Software Description']= df['Software Description'].apply(lambda x : normalize_text(x))
len(df)

tokenizer = tiktoken.get_encoding("cl100k_base")
df['n_tokens'] = df['Software Description'].apply(lambda x: len(tokenizer.encode(x)))
df = df[df.n_tokens<500]
len(df)

sample_encode = tokenizer.encode(df['Software Description'][0])
decode = tokenizer.decode_tokens_bytes(sample_encode)
len(decode)

df['ada_v2'] = df['Software Description'].apply(lambda x : get_embedding(x, engine = 'text-embedding-ada-002'))

df.to_excel("AppInventory_Embeddings.xlsx")



df_clone=df

# search through the reviews for a specific product
top_n=5
for i in range(len(df_clone)):
  tosearch=df_clone.loc[i,'Software Description']
  embedding=df_clone.loc[i,'ada_v2']
  identifier=df_clone.loc[i,'IDENTIFIER']
  df["similarities"] = df.ada_v2.apply(lambda x: cosine_similarity(x, embedding))
   res = (
        df.sort_values("similarities", ascending=False).head(top_n)
  )
  print(" \n ===============================================================\n")
  print ("for Identifier" ,  identifier , " : ")
  display(res)
  print(" \n ===============================================================\n")